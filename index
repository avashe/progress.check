import { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Checkbox } from "@/components/ui/checkbox";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { getDatabase, ref, onValue, set, push } from "firebase/database";
import { initializeApp } from "firebase/app";

const firebaseConfig = {
  apiKey: "AIzaSyD18lYmGY-27uFvTfVUE45G7iDpMv9CD18",
  authDomain: "progress-check-contempgroup.firebaseapp.com",
  databaseURL: "https://progress-check-contempgroup-default-rtdb.firebaseio.com",
  projectId: "progress-check-contempgroup",
  storageBucket: "progress-check-contempgroup.appspot.com",
  messagingSenderId: "833986932284",
  appId: "1:833986932284:web:c647e2bfe039a1b138dd39",
  measurementId: "G-L6SYJNJTJL"
};

const app = initializeApp(firebaseConfig);
const db = getDatabase(app);

export default function GroupProjectTracker() {
  const [tasks, setTasks] = useState([]);
  const [newComment, setNewComment] = useState("");

  useEffect(() => {
    const tasksRef = ref(db, "groupProjectTasks");
    onValue(tasksRef, (snapshot) => {
      const data = snapshot.val();
      setTasks(data || []);
    });
  }, []);

  const updateTask = (updatedTasks) => {
    set(ref(db, "groupProjectTasks"), updatedTasks);
  };

  const handleCheckboxChange = (taskIndex, member, type) => {
    const updatedTasks = [...tasks];
    const completedList = type === 'draft' ? updatedTasks[taskIndex].draftCompleted : updatedTasks[taskIndex].finalCompleted;

    if (completedList.includes(member)) {
      updatedTasks[taskIndex][type === 'draft' ? 'draftCompleted' : 'finalCompleted'] = completedList.filter((m) => m !== member);
    } else {
      updatedTasks[taskIndex][type === 'draft' ? 'draftCompleted' : 'finalCompleted'] = [...completedList, member];
    }
    updateTask(updatedTasks);
  };

  const handleAddComment = (taskIndex) => {
    if (newComment.trim()) {
      const updatedTasks = [...tasks];
      updatedTasks[taskIndex].comments.push(newComment);
      updateTask(updatedTasks);
      setNewComment("");
    }
  };

  return (
    <div className="p-6 space-y-6 bg-pink-100 min-h-screen">
      <img 
        src="https://i.pinimg.com/originals/1f/74/99/1f74997568d04238c3b8f52ef8a8fc17.gif" 
        alt="Cute Pixel Cat" 
        className="mx-auto w-32 h-32 mb-4"
      />
      <h1 className="text-3xl font-bold mb-4 text-pink-700">Group Project Timeframe ü©∑</h1>
      {tasks.map((task, index) => {
        const draftProgress = (task.draftCompleted.length / task.members.length) * 100;
        const finalProgress = (task.finalCompleted.length / task.members.length) * 100;
        return (
          <Card key={index} className="p-4 border border-pink-300 rounded-xl shadow-md bg-pink-50">
            <CardContent>
              <h2 className="text-2xl font-semibold mb-2 text-pink-800">{task.task}</h2>
              <p className="text-gray-600 mb-2"><strong>Deadline:</strong> {task.deadline}</p>
              <p className="mb-2"><strong>Notes:</strong> {task.notes}</p>
              
              <div className="mb-4">
                <h3 className="text-pink-800 font-semibold">Draft Progress</h3>
                <Progress value={draftProgress} className="h-3 bg-pink-300" />
                <p className="text-pink-700 mt-2">Draft Progress: {Math.round(draftProgress)}%</p>
              </div>
              <div className="mb-4">
                <h3 className="text-pink-800 font-semibold">Finalization Progress</h3>
                <Progress value={finalProgress} className="h-3 bg-pink-300" />
                <p className="text-pink-700 mt-2">Finalization Progress: {Math.round(finalProgress)}%</p>
              </div>

              <div className="space-y-2">
                {task.members.map((member, i) => (
                  <div key={i} className="flex items-center gap-4">
                    <div className="flex items-center gap-2">
                      <Checkbox
                        checked={task.draftCompleted.includes(member)}
                        onCheckedChange={() => handleCheckboxChange(index, member, 'draft')}
                      />
                      <span className="text-pink-900">Draft - {member}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Checkbox
                        checked={task.finalCompleted.includes(member)}
                        onCheckedChange={() => handleCheckboxChange(index, member, 'final')}
                      />
                      <span className="text-pink-900">Finalization - {member}</span>
                    </div>
                  </div>
                ))}
              </div>

              <div className="mt-6">
                <h3 className="text-xl font-semibold text-pink-800 mb-2">Comments üìù</h3>
                <Textarea
                  placeholder="Add a comment..."
                  value={newComment}
                  onChange={(e) => setNewComment(e.target.value)}
                  className="w-full bg-pink-50 border-pink-300 text-pink-900"
                />
                <Button 
                  onClick={() => handleAddComment(index)}
                  className="mt-2 bg-pink-500 hover:bg-pink-600 text-white font-bold py-2 px-4 rounded"
                >
                  Add Comment
                </Button>
                <ul className="mt-4 space-y-2">
                  {task.comments.map((comment, i) => (
                    <li key={i} className="p-2 bg-pink-200 rounded-lg">{comment}</li>
                  ))}
                </ul>
              </div>
            </CardContent>
          </Card>
        );
      })}
    </div>
  );
}
